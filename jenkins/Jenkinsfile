pipeline {
    agent any
    environment {
        AWS_CREDENTIALS = credentials('awscreds')

        IMAGE_NAME = 'playwright_python'
    }
    stages {
        stage('Clone repository') {
            steps {
                git 'https://github.com/vanthiyadhevan/playwright_python.git', branch: 'jenkins_slave_node' 
            }
        }
        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }
        stage('Terraform Validate') {
            steps {
                sh 'terraform validate'
            }
        }
        stage('Terraform Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'awscreds']]) {
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Provision Jenkins Slave') {
            steps {
                script {
                    // Fetch the instance details from Terraform output
                    def instanceIp = sh(script: 'terraform output -raw PublicIP', returnStdout: true).trim()

                    // Register EC2 as a Jenkins slave
                    // You'll need to use SSH credentials for connecting to the EC2 instance
                    def slaveNode = jenkins.model.Jenkins.instance.createNode('EC2-Slave')
                    slaveNode.setLauncher(new hudson.slaves.CommandLauncher("ssh -i ~/.ssh/id_rsa ubuntu@${instanceIp} java -jar /home/ubuntu/agent.jar"))
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                // Build the Docker image from the cloned code
                script {
                    docker.build("${IMAGE_NAME}:${BUILD_NUMBER}", '.')
                }
            }
        }
        stage('Run Docker on Slave') {
            agent { label 'EC2-Slave' }
            steps {
                // Run Docker container on the slave instance
                sh "docker run ${IMAGE_NAME}:${BUILD_NUMBER} pytest -v"
            }
        }
    }
}
